openapi: 3.0.3
info:
  title: Campus Digital | API Credential
  version: 2.0.4
  description: |+
    _(doc 2.0.2 | 2023/03/22)_
    <img src="https://d1srudhtr96wcu.cloudfront.net/banners/Universia-Logo-Rojo.png"/>
    ## Introduction
    <p>As part of the Campus Digital product, we have generated a standard for the data required to use the Campus Digital Credential application.</p>
    
    <p>⚠️ We must highlight several points to take into account to make the API's that are going to be generated by the entity:</p>
    
    + Have a <b>circle of trust</b> with the authentication services provided by the entity to its users (students, teachers, etc.).                                                                                                        </li>
    + They must be under <b>HTTPS protocol</b> with valid certificates and <b>without DDNS</b>.
    + These calls (GET) must <b>read the TOKEN generated by the authentication service</b> for the correct identification of the user (never by a req.params).
    
    <p> Example API request:
    
    ```console
      curl 'https://{{api-endpoint}}/credentials' \
      -H 'Connection: keep-alive' \
      -H 'accept: application/json' \
      -H 'Authorization: Bearer {{University AccessToken}}' \
      --compressed
    ```
    ## API status
    | **Status** | **Summary** | **APP action** | **University action** |
    |------|------|------|------|
    | 200 |	Return OK. Info with mandatory minimum requirements. |	Successfully login process. App show credential information. |	- |
    | 204 | There is no user content in the database of the entity. | A message is displayed in the APP for the user. |	You must ensure that all users who can access the APP have the required information exposed in the API.
    | 401 |	The return of information is not authorized. Invalid/expired token. |	User is logged out to start again. |	-
    | 403 | Access denied.  API key is missing or invalid. |	User is logged out to start again. | -
    | 404 | No information found for the user. |	Does not continue with the login process. "Please try again later" message. |	Notice (email) with user, date of Login attempt and API status.
    | 5XX |	University server error. |	Does not continue with the login process. "Please try again later" message. |	Notice (email) with user, date of Login attempt and API status.
    
  contact: 
    name: "Universia - Campus Digital"
    url: "https://mycampusdigital.com"
    email: "campus_team@correo.universia.net"
servers: 
  - url: https://{{UNIVERSITY_DOMAIN}}/
paths:
  /credentials:
    get:
      tags:
        - "University user credential"
      description: |
        Request where the <b>basic data of the university user's credential</b> (<b>student, professor, staff</b>) is returned for the creation of the university credential.
      security:
        - bearerAuth: [] 
        - ApiKeyAuth: []
      parameters:
        - name: accept
          in: header
          required: true
          description: Default accept application/json.
          schema:
            type: string
            enum:
              - application/json
            default: application/json
        - name: Content-type
          in: header
          required: true
          description: Default content type application/json.
          schema:
            type: string
            enum:
              - application/json
            default: application/json
      responses: 
        "200":
          $ref: "#/components/responses/CredentialsSuccessfully"
        "204":
          $ref: "#/components/responses/UserNotContent"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/UserNotFound"
        "5XX":
          $ref: "#/components/responses/ServerError"
components:
  responses:
    CredentialsSuccessfully:
      description: 'OK'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Credential"
    UnauthorizedError:
      description: Access token is missing or invalid
    ForbiddenError:
      description: Server understands the request but refuses to authorize it
    UserNotContent:
      description: User has been found, but the user has not content
    AccessDenied: 
      description: User is not authorized to access this resource with an explicit deny. API key is missing or invalid
    UserNotFound:
      description: User not found on university data base
    ServerError:
      description: University server has an error
  securitySchemes:
    bearerAuth:
      description: University token 
      type: http
      scheme: bearer
    ApiKeyAuth:
      type: apiKey
      in: header
      name: apikey
  schemas:
    Credential:
      type: object
      description: "Data structure credential for the user card in campus application"
      properties:
        person:
          $ref: "#/components/schemas/Person"
        userUniversities:
          type: array
          description: Array info about user university. More than one if the user has more than one study, role or belongs to a group of universities and has a credential in more than one
          items:
            $ref: "#/components/schemas/UserUniversity"
        userNotificationsGroups:
          $ref: "#/components/schemas/userNotificationsGroups"
    Person:
      type: object
      description: Data structure containing information about a natural person
      required: [personName]
      properties: 
        personName:
          $ref: "#/components/schemas/PersonName"
        contactPoint:
          $ref: "#/components/schemas/ContactPoint"
        document:
          $ref: "#/components/schemas/Document"
        nationality:
          $ref: "#/components/schemas/Nationality"
        birthDate: 
          type: "string"
          description: "Date when the person was born.\n\nThe value uses the complete data format defined in ISO 8601:\n\n'YYYY-MM-DD'\n\nWhere:\n- YYYY: 4-digit year\n- MM: 2-digit month (for example, 01 = January)\n- DD: 2-digit day of the month (01 through 31)"
          example: "1998-06-05"
          format: "date"
    UserUniversity:
      type: object
      description: Data structure containing university user data model
      required: [userId, userImage]
      properties:
        userId:
          type: "string"
          description: "User Identifier to show in credential card and shared with the university for other api purpose, for example to identify user in the access control university system." 
          example: "XXXXXXXXX"
        creationDate:
          type: "string"
          description: "Student university enrollment date. \n\nThe value uses the complete data format defined in ISO 8601:\n\n'YYYY-MM-DD'\n\nWhere:\n- YYYY: 4-digit year\n- MM: 2-digit month (for example, 01 = January)\n- DD: 2-digit day of the month (01 through 31)"
          example: "2018-09-25"
          format: "date"
        userImage:
          type: "object"
          description: "User image to show in user credential card, aspect ratio 1:1"
          properties:
            url:
              type: string
              example: https://university.domain/user_image.jpg
              format: ".JPG, .PNG"
        courses:
          $ref: "#/components/schemas/Courses"
        additionalUniversityUserData:
          $ref: "#/components/schemas/AdditionalUniversityUserData"
        role:
          $ref: "#/components/schemas/Role"
        university:
          $ref: "#/components/schemas/University"
    PersonName: 
      type: object
      description: Data structure containing information about a person's name. The information included in the data structure is for the name by which the person is known and that is usually used to identify the person.
      required: [givenName, lastName]
      properties: 
        givenName:
          type: "string"
          description: "Person's first name."
          maxLength: 50
          example: "Manuel"
        lastName:
          type: "string"
          description: "Person's family name."
          example: "García"
          maxLength: 50
        secondLastName:
          type: "string"
          description: "Person's second family name"
          maxLength: 50
          example: "Rodríguez"
    ContactPoint:
      type: object
      description: Data structure containing information about a contact point. A contact point is a phone number, physical address, or virtual address used for communication purposes.
      required: [emailAddress]
      properties: 
        telephone:
          type: string
          description: The telephone number. [(Country_code) local_part]
          example: (425) 123 4567
        emailAddress:
          type: string
          description: Contact student personal email address
          example: usermail@gmail.com
    Document:
      type: object
      description: Data structure containing information to identify a person in a country.
      required: [documentNumber, issuerEntityCountry]
      properties:
        documentNumber:
          type: string
          description: "National identity document number"
          example: "50456713W"
        issuerEntityCountry:
          type: string
          description: "Official country entity that issues the document. (https://www.iso.org/obp/ui/#search/code/)"
          format: "ISO 3166 Alpha-2"
          maxLength : 2
          example: "ES"
    Nationality:
      type: object
      description: Data structure containing information about the country of the person's
      required: [countryCode]
      properties:
        countryCode: 
          description: "Country code.\n\nThe value is based on the ISO 3166 Alpha-2 (https://www.iso.org/obp/ui/#search/code/)."
          example : "US"
          format: "ISO 3166 Alpha-2"
          maxLength : 2
    AdditionalUniversityUserData:
      type: array
      description: "Collection of additional user parameters not stipulated in the API contract" 
      required: [label, value]
      items:
        type: object
        properties:
          label: 
            type: string
            description: "Additional parameter title"
            example: "Grupo"
          value:
            type: string
            description: "Additional value"
            example: "A"
    Courses:
      type: array
      description: Data structure that contains information for the course of the user who studies
      required: [name, type]
      items:
        properties:
          name:
            type: string
            description: The name of the course
            maxLength: 50
          type:
            type: string
            description: The type of study 
            enum: [degree, master, doctorate, fp, subject , high school, other]
    Role:
      type: object
      description: Data structure that contains information for the role
      required: [name]
      properties:
        name: 
          type: string
          description: "The name of the user role."
          example: "Student"
    University:
      type: object
      description: Data structure that contains information for the university
      required: [universityId]
      properties:
        universityId: 
          type: "string"
          description: "Campus Digital university identifier for group of universities. Campus team provide this key."
          example: "9f361224-5890-459b-82f9-0a01f321e68a"
          format: "uuid"
    userNotificationsGroups:
      type: object
      description: "Groups for the Campus Digital notification service, only needed in Campus APP dynamic."
      required: [mandatory]
      properties:
        mandatory: 
          type: array
          description: "Manda group to which the user belongs. Allowed values: student | professor | services | tester\nThe tester role is focused on accounts that exclusively test apps. "
          example: ["student"]
          items:
            type: string
            example: student
            enum: [student, services, professor, tester]
        optional: 
          type: array
          description: "Optional groups to which the user belongs"
          example: ["Estudiante de ingeniería", "Estudiante de Campus Maya"]
          items:
            type: string
            example: "Estudiante de ingeniería"
